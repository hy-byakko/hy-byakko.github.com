// Generated by CoffeeScript 1.6.3
define(['jquery', 'underscore', 'backbone', 'collections/posts', 'routers/router'], function($, _, Backbone, posts, router) {
  'use strict';
  return Backbone.View.extend({
    el: '#main_content_wrap',
    events: {
      'click #page-switcher-pre': 'preSwitch',
      'click #page-switcher-next': 'nextSwitch'
    },
    switcherTemplate: _.template($('#post-switcher').html()),
    indexBarTemplate: _.template($('#index-bar').html()),
    tagLinkTemplate: _.template($('#tag-link').html()),
    postTitleTemplate: _.template($('#post-title').html()),
    initialize: function() {
      var $el;
      $el = this.$el;
      $el.append(this.switcherTemplate({
        location: 'left',
        content: '‹',
        id: 'pre'
      }));
      $el.append(this.switcherTemplate({
        location: 'right',
        content: '›',
        id: 'next'
      }));
      this.$preSwitcher = this.$('#page-switcher-pre');
      this.$nextSwitcher = this.$('#page-switcher-next');
      this.$title = $('#post_title');
      this.$main = this.$('#main_content');
      this.$index = this.$('#index_content');
      this.$tags = $('#header_wrap #tags');
      this.$loading = this.$('#loading');
      this.listenTo(posts, 'render', this.render);
      return posts.load();
    },
    render: function() {
      if (posts.activeId) {
        this.mainRender();
      } else {
        this.indexRender();
      }
      this.tagRender();
      return this;
    },
    indexRender: function() {
      var _this = this;
      this.$preSwitcher.hide();
      this.$nextSwitcher.hide();
      this.$title.hide();
      this.$main.hide();
      this.$index.empty();
      if (posts.ready) {
        this.$loading.hide();
        posts.each(function(post) {
          var bar;
          bar = $($.parseHTML(_this.indexBarTemplate({
            title: post.get('title'),
            link: post.getLink(),
            time: post.getTime().toLocaleDateString()
          }))[1]);
          _.each(post.getTags(), function(tag) {
            return bar.append(_this.tagLinkTemplate({
              name: tag,
              link: '#/tags/' + tag
            }));
          });
          return _this.$index.append(bar);
        });
        return this.$index.show();
      } else {
        return this.$loading.show();
      }
    },
    mainRender: function() {
      var content, post;
      post = posts.currentPost();
      content = posts.getContent();
      this.$index.hide();
      if (post) {
        if (content) {
          this.$loading.hide();
          this.$main.html(content);
          this.$title.html(post.get('title'));
          this.$preSwitcher.toggle(!!posts.offsetPost(-1));
          this.$nextSwitcher.toggle(!!posts.offsetPost(1));
          this.$title.html(this.postTitleTemplate({
            title: post.get('title'),
            time: post.getTime().toLocaleString()
          }));
          this.$title.show();
          return this.$main.show();
        } else {
          this.$main.hide();
          return this.$loading.show();
        }
      }
    },
    tagRender: function() {
      var post, tags,
        _this = this;
      post = posts.currentPost();
      this.$tags.empty();
      tags = post ? post.getTags() : posts.getTags();
      return _.each(tags, function(tag) {
        return _this.$tags.append(_this.tagLinkTemplate({
          name: tag,
          link: '#/tags/' + tag
        }));
      });
    },
    preSwitch: function() {
      return router.navigate('//posts/' + posts.offsetPost(-1).get('id'));
    },
    nextSwitch: function() {
      return router.navigate('//posts/' + posts.offsetPost(1).get('id'));
    }
  });
});
